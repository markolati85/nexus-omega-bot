#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ Binance –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API –ª–∏–º–∏—Ç–æ–≤ –∏ —Å–µ—Ä–±—Å–∫–æ–≥–æ IP
Test Binance bot cycles with API weight limits and Serbian IP verification
"""
import os
import time
import logging
import requests
from datetime import datetime
from binance.client import Client
from binance.exceptions import BinanceAPIException
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_cycles_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BinanceBotTester:
    def __init__(self):
        self.api_key = os.getenv('BINANCE_API_KEY')
        self.api_secret = os.getenv('BINANCE_API_SECRET')
        self.client = None
        self.cycle_count = 0
        self.weight_usage = {}
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.trading_pairs = [
            'BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT',
            'XRPUSDT', 'BNBUSDT', 'DOTUSDT', 'LINKUSDT'
        ]
        
    def setup_binance_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not self.api_key or not self.api_secret:
                logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
                return False
            
            self.client = Client(self.api_key, self.api_secret)
            
            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            account = self.client.get_account()
            logger.info(f"‚úÖ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ - –¢–æ—Ä–≥–æ–≤–ª—è: {account.get('canTrade', False)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            return False
    
    def get_external_ip(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP
            services = [
                'https://ifconfig.me',
                'https://ipinfo.io/ip', 
                'https://api.ipify.org'
            ]
            
            for service in services:
                try:
                    response = requests.get(service, timeout=10)
                    ip = response.text.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ—Ä–±—Å–∫–∏–π –ª–∏ —ç—Ç–æ IP
                    geo_response = requests.get(f'https://ipinfo.io/{ip}/json', timeout=10)
                    geo_data = geo_response.json()
                    
                    country = geo_data.get('country', 'Unknown')
                    city = geo_data.get('city', 'Unknown')
                    org = geo_data.get('org', 'Unknown')
                    
                    logger.info(f"üåç IP: {ip} | –°—Ç—Ä–∞–Ω–∞: {country} | –ì–æ—Ä–æ–¥: {city}")
                    logger.info(f"üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {org}")
                    
                    if country == 'RS':
                        logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å–µ—Ä–±—Å–∫–∏–π IP")
                    else:
                        logger.warning(f"‚ö†Ô∏è IP –Ω–µ –∏–∑ –°–µ—Ä–±–∏–∏ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {country})")
                    
                    return ip, country, city, org
                    
                except Exception as e:
                    logger.warning(f"–°–µ—Ä–≤–∏—Å {service} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    continue
                    
            return "Unknown", "Unknown", "Unknown", "Unknown"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP: {e}")
            return "Error", "Error", "Error", "Error"
    
    def get_account_balance_with_weights(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º API weight"""
        try:
            if not self.client:
                return 0.0, {}
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∞–∫–∫–∞—É–Ω—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response = self.client.get_account()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ weight –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: python-binance –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ headers
            # –ù–æ –º—ã –º–æ–∂–µ–º –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            
            usdt_balance = 0.0
            for balance in response['balances']:
                if balance['asset'] == 'USDT':
                    usdt_balance = float(balance['free'])
                    break
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            logger.info(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: ${usdt_balance:.2f}")
            
            return usdt_balance, {}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0, {}
    
    def get_symbol_price_with_weights(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º weight"""
        try:
            if not self.client:
                return 0.0
            
            ticker = self.client.get_symbol_ticker(symbol=symbol)
            price = float(ticker['price'])
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –≤–µ—Å–∏—Ç 2 weight units
            self.weight_usage[symbol] = self.weight_usage.get(symbol, 0) + 2
            
            logger.debug(f"üìä {symbol}: ${price:.4f} (weight: +2)")
            
            return price
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0
    
    def calculate_rsi_with_weights(self, symbol, interval='1h', period=14):
        """–†–∞—Å—á—ë—Ç RSI —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º weight"""
        try:
            if not self.client:
                return 50
            
            # –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤–µ—Å–∏—Ç 2 weight units
            klines = self.client.get_klines(symbol=symbol, interval=interval, limit=period+1)
            self.weight_usage[f'{symbol}_klines'] = self.weight_usage.get(f'{symbol}_klines', 0) + 2
            
            closes = [float(kline[4]) for kline in klines]
            
            if len(closes) < period + 1:
                return 50
            
            deltas = [closes[i] - closes[i-1] for i in range(1, len(closes))]
            gains = [delta if delta > 0 else 0 for delta in deltas]
            losses = [-delta if delta < 0 else 0 for delta in deltas]
            
            avg_gain = sum(gains[-period:]) / period
            avg_loss = sum(losses[-period:]) / period
            
            if avg_loss == 0:
                return 100
            
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            
            logger.debug(f"üìà {symbol} RSI: {rsi:.1f} (weight: +2)")
            
            return rsi
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ RSI –¥–ª—è {symbol}: {e}")
            return 50
    
    def analyze_trading_pair(self, symbol):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            current_price = self.get_symbol_price_with_weights(symbol)
            rsi = self.calculate_rsi_with_weights(symbol)
            
            if current_price == 0:
                return None
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
            signal = None
            if rsi < 30:
                signal = {
                    'action': 'BUY',
                    'symbol': symbol,
                    'price': current_price,
                    'rsi': rsi,
                    'reason': f'RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ({rsi:.1f})'
                }
            elif rsi > 70:
                signal = {
                    'action': 'SELL', 
                    'symbol': symbol,
                    'price': current_price,
                    'rsi': rsi,
                    'reason': f'RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω ({rsi:.1f})'
                }
            
            logger.info(f"üìä {symbol}: ${current_price:.4f} | RSI: {rsi:.1f} | {signal['action'] if signal else 'HOLD'}")
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    def trading_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        self.cycle_count += 1
        cycle_start = time.time()
        
        logger.info(f"üîÑ === –¶–ò–ö–õ #{self.cycle_count} –ù–ê–ß–ê–õ–°–Ø ===")
        
        try:
            # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ weight –¥–ª—è —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞
            self.weight_usage = {}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            balance, balance_weights = self.get_account_balance_with_weights()
            
            signals_generated = 0
            total_weight = 4  # –ù–∞—á–∞–ª—å–Ω—ã–π weight –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (4 units)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            for symbol in self.trading_pairs:
                signal = self.analyze_trading_pair(symbol)
                
                if signal:
                    signals_generated += 1
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: {signal['action']} {symbol} - {signal['reason']}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                time.sleep(0.5)
            
            # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è weight
            for key, weight in self.weight_usage.items():
                total_weight += weight
            
            cycle_duration = time.time() - cycle_start
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ü–∏–∫–ª–∞
            logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ü–∏–∫–ª–∞ #{self.cycle_count}:")
            logger.info(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
            logger.info(f"   üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {signals_generated}")
            logger.info(f"   ‚öñÔ∏è –û–±—â–∏–π API Weight: {total_weight}")
            logger.info(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {cycle_duration:.1f}—Å")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
            if total_weight > 100:  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API weight: {total_weight}")
            
            logger.info(f"üîÑ === –¶–ò–ö–õ #{self.cycle_count} –ó–ê–í–ï–†–®–Å–ù ===\n")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")
            return False
    
    def run_test_cycles(self, num_cycles=5):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø NEXUS AI BINANCE BOT")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        ip, country, city, org = self.get_external_ip()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞
        if not self.setup_binance_client():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance API")
            return False
        
        logger.info(f"üìä –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {', '.join(self.trading_pairs)}")
        logger.info(f"üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ü–∏–∫–ª–æ–≤: {num_cycles}")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: 30 —Å–µ–∫—É–Ω–¥")
        logger.info("=" * 60)
        
        successful_cycles = 0
        
        for i in range(num_cycles):
            try:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
                success = self.trading_cycle()
                
                if success:
                    successful_cycles += 1
                    logger.info(f"‚úÖ –¶–∏–∫–ª #{i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå –¶–∏–∫–ª #{i+1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < num_cycles - 1:
                    logger.info("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                    time.sleep(30)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {i+1}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        logger.info("=" * 60)
        logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info(f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {successful_cycles}/{num_cycles}")
        logger.info(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_cycles/num_cycles)*100:.1f}%")
        logger.info(f"üåç IP –∞–¥—Ä–µ—Å: {ip} ({country})")
        logger.info(f"üèôÔ∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {city}")
        logger.info(f"üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {org}")
        
        if country == 'RS':
            logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å–µ—Ä–±—Å–∫–∏–π IP - VPN –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è IP –Ω–µ –∏–∑ –°–µ—Ä–±–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω VPN")
        
        logger.info("=" * 60)
        
        return successful_cycles == num_cycles

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BinanceBotTester()
    
    # –ó–∞–ø—É—Å–∫ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
    success = tester.run_test_cycles(5)
    
    if success:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()